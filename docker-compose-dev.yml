# to run in development use this command 
# `` sudo docker-compose -f docker-compose-dev.yml up --build ``

services:
  postgres:
    # use the db with postGIS extentions
    image: postgis/postgis:16-3.4-alpine
    container_name: openmeet_postgres
    ports:
      - ${DATABASE_PORT}:5432
    env_file:
      - .env
    volumes:
      - dbdata:/var/lib/postgresql/data
      # init scripts for PostGIS  
      - ./pg-init-scripts:/docker-entrypoint-initdb.d
    environment:
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    entrypoint: ["docker-entrypoint.sh", "-c", "max_connections=${DATABASE_MAX_CONNECTIONS}"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USERNAME} -d ${DATABASE_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - api-network

  maildev:
    build:
      context: .
      dockerfile: maildev.Dockerfile
    ports:
      - ${MAIL_CLIENT_PORT}:1080
      - ${MAIL_PORT}:1025
    networks:
      - api-network

  pgadmin:
    image: dpage/pgadmin4
    depends_on:
      - postgres
    ports:
      - "8080:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    restart: always
    networks:
      - api-network

  # Uncomment to use redis
  redis:
    image: redis:7-alpine
    container_name: openmeet_redis
    ports:
      - "6379:6379"
    restart: always
    networks:
      - api-network

  # Matrix Authentication Service
  matrix-auth-service:
    image: ghcr.io/element-hq/matrix-authentication-service:latest
    container_name: openmeet_mas
    ports:
      - "8081:8080"
    environment:
      MAS_CONFIG: /data/config.yaml
    volumes:
      - ./matrix-config/mas-config-local.yaml:/data/config.yaml:ro
      - mas-data:/data
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - api-network
  matrix:
    image: matrixdotorg/synapse:v1.132.0
    container_name: openmeet_matrix
    ports:
      - "8448:8448"
      - "9090:9090"  # Expose Prometheus metrics port
    environment:
      # Only set the host value that can't come from .env
      POSTGRES_HOST: postgres
      # Set the default Matrix port and host for local development
      MATRIX_HOST: localhost
      MATRIX_PORT: 8448
      # Standard Synapse settings
      SYNAPSE_REPORT_STATS: "no"
      SYNAPSE_LOG_LEVEL: "INFO"
      # MAS integration
      MAS_ISSUER: "http://matrix-auth-service:8080/"
      MAS_CLIENT_SECRET: "${MAS_CLIENT_SECRET}"
    volumes:
      - ./matrix-config/homeserver-mas-local.yaml:/data/homeserver.yaml
      - ./matrix-config/log.config:/data/log.config
      - ./matrix-config/init.sh:/data/init.sh
      - ./matrix-config/start-matrix.sh:/data/start-matrix.sh
      - ./matrix-config/openmeet-appservice-local.yaml:/data/appservices/openmeet-appservice-local.yaml
      - matrix-data:/data/media
    depends_on:
      postgres:
        condition: service_healthy
      matrix-auth-service:
        condition: service_started
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8448/_matrix/client/versions"]
      interval: 10s
      timeout: 5s
      retries: 5
    entrypoint: ["/bin/bash", "-c"]
    command:
      - |
        # Install envsubst and jq if not already available
        apt-get update && apt-get install -y gettext-base jq curl python3
        chmod +x /data/start-matrix.sh
        chmod +x /data/init.sh
        /data/start-matrix.sh &
        sleep 15 && /data/init.sh &
        wait
    networks:
      - api-network

  matrix-web:
    image: nginx:alpine
    container_name: openmeet_matrix_web
    ports:
      - "80:80"
    volumes:
      - ./matrix-config/.well-known:/usr/share/nginx/html/.well-known
      - ./matrix-config/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - matrix
    networks:
      - api-network

  # api:
  #   build:
  #     context: .
  #     dockerfile: ./Dockerfile.dev
  #   container_name: api
  #   hostname: api
  #   ports:
  #     - ${APP_PORT}:${APP_PORT}
  #   env_file:
  #     - .env
  #   volumes:
  #     - ./src/:/app/src/
  #     # - ./package.json:/app/package.json
  #     # - /app/node_modules # Use node_modules from the container
  #     - .env/:/app/.env
  #   networks:
  #     - api-network
  #   depends_on:
  #     - postgres

  tracing:
    image: jaegertracing/all-in-one:latest
    ports:
      - 6831:6831/udp
      - 6832:6832/udp
      - 5778:5778
      - 16686:16686
      - 4317:4317
      - 4318:4318
      - 14250:14250
      - 14268:14268
      - 14269:14269
      - 9411:9411
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - api-network

volumes:
  dbdata:
  matrix-data:
  mas-data:
    driver: local

networks:
  api-network:
    driver: bridge